import random
import data_base
import re


'''
================================================================tools=================================================

'''

'''
let_stences_be_lists_from_stencil
输入1.待填充的句子stencil，格式：str
2.被选择填充的字符字典num_words，格式：{字符str：对应可填充字符list}
3.对应字符的数字字典num，格式：{字符str：对应字符待填充个数int}
'''
def let_stences_be_lists_from_stencil(stencil,num,num_words):
    word_lists = dict()
    dic ={}
    '''
    有一部分填入项不在这个函数中处理，
    '''
    cant_list = re.findall(r'[{](.*?)[}]',stencil)
    for all in cant_list:
        dic.update( {all :'{'+all+'}'})

    for numbers in num.keys():
        word_lists[numbers] = random.sample(num_words[numbers], num[numbers])
    for current_type in num.keys():
        current_list = word_lists[current_type]
        for i in range(0, len(current_list)):
            dic[current_type + str(i)] = current_list[i]
    #print(stencil)
    #print(dic)
    result = stencil.format(**dic)
    return result
'''
stencil = '{n40}是{v0}{n41}，{v1}行业{n30}。{n42}是{v2}{n20}{n43}，通过{n31}和{n32}达到{n33}。' \
          '{n44}是在{n45}采用{n21}打法达成{n46}。{n47}{n48}作为{n22}为产品赋能，{n49}作为{n23}' \
          '的评判标准。亮点是{n24}，优势是{n25}。{v3}整个{n410}，{v4}{n26}{v5}{n411}。{n34}是{n35}' \
          '达到{n36}标准。'

num = {'v': 6, 'n2': 7, 'n3': 7, 'n4': 12}


# 二字动词
v = '皮实、复盘、赋能、加持、沉淀、倒逼、落地、串联、协同、反哺、兼容、包装、重组、履约、' \
    '响应、量化、发力、布局、联动、细分、梳理、输出、加速、共建、共创、支撑、融合、解耦、聚合、' \
    '集成、对标、对齐、聚焦、抓手、拆解、拉通、抽象、摸索、提炼、打通、吃透、迁移、分发、分层、' \
    '封装、辐射、围绕、复用、渗透、扩展、开拓、给到、死磕、破圈'.split('、')

# 二字名词
n2 = '漏斗、中台、闭环、打法、纽带、矩阵、刺激、规模、场景、维度、格局、形态、生态、话术、' \
     '体系、认知、玩法、体感、感知、调性、心智、战役、合力、赛道、基因、因子、模型、载体、横向、' \
     '通道、补位、链路、试点'.split('、')

# 三字名词
n3 = '新生态、感知度、颗粒度、方法论、组合拳、引爆点、点线面、精细化、差异化、平台化、结构化、' \
     '影响力、耦合性、易用性、便捷性、一致性、端到端、短平快、护城河'.split('、')

# 四字名词
n4 = '底层逻辑、顶层设计、交付价值、生命周期、价值转化、强化认知、资源倾斜、完善逻辑、抽离透传、' \
     '复用打法、商业模式、快速响应、定性定量、关键路径、去中心化、结果导向、垂直领域、归因分析、' \
     '体验度量、信息屏障'.split('、')

v_list = random.sample(v, num['v'])
n2_list = random.sample(n2, num['n2'])
n3_list = random.sample(n3, num['n3'])
n4_list = random.sample(n4, num['n4'])
lists = {'v': v_list, 'n2': n2_list, 'n3': n3_list, 'n4': n4_list}

dic = {}
for current_type in ['v', 'n2', 'n3', 'n4']:
    current_list = lists[current_type]
    for i in range(0, len(current_list)):
        dic[current_type + str(i)] = current_list[i]

result = stencil.format(**dic)
'''

'''
普通的人物描述，直接描述没有任何变化
'''

discrbe_a_life_sum_up_all_done = {'M_man_very_high':"最高神一定按照自己理想中帅的样子亲手制作了他。/他长得像一枚行走的春药。/再看到他的"\
                                                    "时候，你的心里很难不产生几个极其邪恶的想法。/如果你曾发誓一生只爱一个人，那么他是你"\
                                                    "誓言的悖论。/女帝看到他的话说不定会不择手段地得到他。".split('/'),
'M_man_high':"如果你是个女孩的话，说不定会把他引荐给你的闺蜜，因为他真的挺帅的。/如果睡醒后能见到这么帅的男生，你一定会觉得自己的人生充满了意义。/你也许不会对他一见钟情，"\
             "但你一定会觉得这世界上应该没多少这么帅的男生。/即使是男生，说不定也喜欢这样的男生吧。/他身上有什么特质非常地吸引你，我也说不清楚，"\
             "可能是帅。/可能男生跟这么帅的男生走在一起是会有压力的。".split('/'),
'M_man_mid':"你也可以这么想：他其实长得很帅，就是帅的很不明显。/他和你在路上见到的男人没什么两样。/他好好打扮一下，说点甜"\
            "言蜜语也许也能勾引几个漂亮的女孩子吧。但他现在这样肯定不行。/你如果是个女孩的话，一定会对这张脸过目既忘的。/他"\
            "是一个标准的普通男性，非常标准。这世上有很多像他这样的人。/大概没有人会在意这样普通的男人吧，即使注意到了也看不出"\
            "什么特别的地方。/他真的很难被注意到。如果你注意到了他，那么说明你的注意力不集中。".split('/'),\
'M_man_low':"他是那种即使豪掷千金也很难让女人陪他过夜的长相。/他真的很丑，真的。/对于这样一个男人，我能说你不会想看第二眼的。/"\
            "见到他以前千万别吃太贵的早餐，因为你一定会吐的。/一见钟情发生在他身上的概率比一个正常的女性爱上一只猪的概率还低。/我"\
            "敢打赌，要么他很有钱，要么喜欢他的女人一定很好色。".split('/'),
'M_woman_very_high':" 即便是数百旬的精灵，数千旬的神明，也或许未能在星海中见过这般美丽容颜。/能见她，仿若见昙花一现。/她的笑容那般"\
                    "无邪，仿若数百年也未踏足过的世界，数千年也无被访问的文明。/最高神塑造了她来嘲讽画师或是雕塑家的想象力，一个崇尚"\
                    "美的人绝不会忘记她的样子，声音。/她的美可能成为任何一个域的领主毁灭世界的理由。".split('/'),\
'M_woman_high':"尽管在闹市之中，也可以一眼认出她的五官。/传闻说很多人是凭蝴蝶骨来辨认美人的，可她偏偏就有让人一眼便能爱上的背影。/她的眼"\
               "神，仿若月色在江面上散落的流光。/即使记性不好的人，也能记得这样的一个美人儿。/不要太相信一见钟情，因为对视上一眼，说不准你"\
               "就会爱上她。/如果你白天见过她，说不定你今晚也许会梦见她，那个梦或许还有点邪恶。".split('/'),\
'M_woman_mid':" 她的样貌让人感觉很熟悉，总觉得在市井中见过。/即使相处了很久，也很难让人记住她的样子。/她就像邻居家的大姐姐那样，你总会觉得见"\
              "过这样的人。/她其实挺漂亮的，但你很难记住她的样子。/也许在某些人眼里她是天使，可是在你眼里她没什么特别的地方。/你也许会对她一见"\
              "钟情，但相处久了，久而久之就不会这么想了。".split('/'),
'M_woman_low':" 大概没人想看第二眼，这样的容貌吧。/要发现她的美感，你需要看上很久，这是种折磨。/五官和身形居然可以这么随意地设计，简直是鬼斧神工"\
              "。/也许她是个好人，但很难让人爱上她。/如果你问她是否相信一见钟情，那简直是个笑话。她已经长成这样了，怎么可能相信一见钟情。/她遇到渣"\
              "男的次数一定少于其他人，因为即使是渣男行骗时也不会这么饥不择食。".split('/'),
'JL_man_very_high' :" 它的眼神里充满了威严，让人害怕又忍不住去接近。/最高神可能亲自设计了这个精灵的样子，才能让它这么让人喜欢。/见过这样的精灵，"\
                    "可能很难再爱上人类了。/恭喜你，今天你见到了传说。你看倒塌的时候，你一定也是这么想的。/不管什么的生物，对这样漂亮的精灵都缺"\
                    "乏抵抗力。/望着它，沉迷它，你会忘记很多事。人生种种，似水流年。".split('/'),
'JL_man_high' :" 你一定会很喜欢这样的精灵的，它真的超级可爱。/我知道你的想法：它真的萌爆了。/如果你见过这么漂亮的精灵，你的人生一定是不完整的。/"\
               "你在赞歌里听说过这样的精灵，它长得像诗人歌颂的样子。/我知道你喜欢它，谁不是呢。/它的长相使得它像在童话故事里那么受小孩子欢迎。".split('/'),\
'JL_man_mid' :" 它是个普通的精灵，就像你在教科书里见过的那样。/精灵就长这样，如果你见多了精灵就不会惊讶了。/可能会有人对精灵感到好奇，但见多就知道"\
              "它真的很普通。/会喜欢这样的精灵的人，大概只剩下重度furry控了。/如果你超喜欢这样的精灵，只能说明你是个无可救药的重度furry控。".split('/'),\
'JL_man_low' :" 到底有多furry控才能不反感这么丑的精灵？/如果见到它出现在童话里，小孩子一定会吓哭的。/它真的太可怕了，祝它出现在你梦里一定是一句骂人"\
              "的话。/它的长相实在太吓人了，把眼睛闭上祈祷它赶紧走开吧。/我敢打赌你从没见这么丑的精灵，绝对没有。/我觉得如果被这个精灵看上，也许算是倒大霉吧。".split('/'),\
'JL_woman_very_high' :" 它的眼神里充满了威严，让人害怕又忍不住去接近。/最高神可能亲自设计了这个精灵的样子，才能让它这么让人喜欢。/见过这样的精灵，可"\
                      "能很难再爱上人类了。/恭喜你，今天你见到了传说。你看倒塌的时候，你一定也是这么想的。/不管什么的生物，对这样漂亮的精灵都缺乏抵抗力"\
                      "。/望着它，沉迷它，你会忘记很多事。人生种种，似水流年。".split('/'),
'JL_woman_high' :" 你一定会很喜欢这样的精灵的，它真的超级可爱。/我知道你的想法：它真的萌爆了。/如果你见过这么漂亮的精灵，你的人生一定是不完整的。/你在赞歌"\
                 "里听说过这样的精灵，它长得像诗人歌颂的样子。/我知道你喜欢它，谁不是呢。/它的长相使得它像在童话故事里那么受小孩子欢迎。".split('/'),\
'JL_woman_mid':" 它是个普通的精灵，就像你在教科书里见过的那样。/精灵就长这样，如果你见多了精灵就不会惊讶了。/可能会有人对精灵感到好奇，但见多就知道它真的很普"\
               "通。/会喜欢这样的精灵的人，大概只剩下重度furry控了。/如果你超喜欢这样的精灵，只能说明你是个无可救药的重度furry控。".split('/'),\
'JL_woman_low':" 到底有多furry控才能不反感这么丑的精灵？/如果见到它出现在童话里，小孩子一定会吓哭的。/它真的太可怕了，祝它出现在你梦里一定是一"\
               "句骂人的话。/它的长相实在太吓人了，把眼睛闭上祈祷它赶紧走开吧。/我敢打赌你从没见这么丑的精灵，绝对没有。/我觉得如果被这个精灵看"\
               "上，也许算是倒大霉吧。".split('/'),
'god_man_very_high' :" 神明总是带着面罩，大多数人只在画像上见过他的盛世美颜。/其实他很清楚，大多数信众爱的是他的脸。/不论多虔诚的信徒，对这样"\
                     "的神明总会产生一些不洁的想法。/你也许会后悔见到这样的神明，因为你不能爱上一个神。/见过他以后你就明白为什么你是凡人，为什"\
                     "么说凡人的颜值是有上限的。/不论多帅的男人，在他面前都黯然失色。它能让任何一个生物迷上他，即使是一个无情的精灵。/你也许"\
                     "在读到磅礴的传说时想象过这样的身影，那一丝想象不及他样貌的万分之一。".split('/'),
'god_man_high' :" 神明总是带着面罩，大多数人只在画像上见过他的盛世美颜。/其实他很清楚，大多数信众爱的是他的脸。/不论多虔诚的信徒，对这样的神"\
                "明总会产生一些不洁的想法。/你也许会后悔见到这样的神明，因为你不能爱上一个神。/见过他以后你就明白为什么你是凡人，为什么说"\
                "凡人的颜值是有上限的。/不论多帅的男人，在他面前都黯然失色。它能让任何一个生物迷上他，即使是一个无情的精灵。/你也许在读到磅礴的"\
                "传说时想象过这样的身影，那一丝想象不及他样貌的万分之一。".split('/'),
'god_man_mid' :"神明总是带着面罩，大多数人只在画像上见过他的盛世美颜。/其实他很清楚，大多数信众爱的是他的脸。/不论多虔诚的信徒，对这样的神明"\
               "总会产生一些不洁的想法。/你也许会后悔见到这样的神明，因为你不能爱上一个神。/见过他以后你就明白为什么你是凡人，为什么说凡人的颜"\
               "值是有上限的。/不论多帅的男人，在他面前都黯然失色。它能让任何一个生物迷上他，即使是一个无情的精灵。/你也许在读到磅礴的传说时想象"\
               "过这样的身影，那一丝想象不及他样貌的万分之一。".split('/'),
'god_man_low' :"神明总是带着面罩，大多数人只在画像上见过他的盛世美颜。/其实他很清楚，大多数信众爱的是他的脸。/不论多虔诚的信徒，对这样的神明"\
               "总会产生一些不洁的想法。/你也许会后悔见到这样的神明，因为你不能爱上一个神。/见过他以后你就明白为什么你是凡人，为什么说凡人的颜"\
               "值是有上限的。/不论多帅的男人，在他面前都黯然失色。它能让任何一个生物迷上他，即使是一个无情的精灵。/你也许在读到磅礴的传说时想象"\
               "过这样的身影，那一丝想象不及他样貌的万分之一。".split('/'),
'god_woman_very_high' :"神明总是带着面罩，大多数人只在画像上见过他的盛世美颜。/其实他很清楚，大多数信众爱的是他的脸。/不论多虔诚的信徒，对这样的神明"\
               "总会产生一些不洁的想法。/你也许会后悔见到这样的神明，因为你不能爱上一个神。/见过他以后你就明白为什么你是凡人，为什么说凡人的颜"\
               "值是有上限的。/不论多帅的男人，在他面前都黯然失色。它能让任何一个生物迷上他，即使是一个无情的精灵。/你也许在读到磅礴的传说时想象"\
               "过这样的身影，那一丝想象不及他样貌的万分之一。".split('/'),
'god_woman_high' :"神明总是带着面罩，大多数人只在画像上见过他的盛世美颜。/其实他很清楚，大多数信众爱的是他的脸。/不论多虔诚的信徒，对这样的神明"\
               "总会产生一些不洁的想法。/你也许会后悔见到这样的神明，因为你不能爱上一个神。/见过他以后你就明白为什么你是凡人，为什么说凡人的颜"\
               "值是有上限的。/不论多帅的男人，在他面前都黯然失色。它能让任何一个生物迷上他，即使是一个无情的精灵。/你也许在读到磅礴的传说时想象"\
               "过这样的身影，那一丝想象不及他样貌的万分之一。".split('/'),
'god_woman_mid':"神明总是带着面罩，大多数人只在画像上见过他的盛世美颜。/其实他很清楚，大多数信众爱的是他的脸。/不论多虔诚的信徒，对这样的神明"\
               "总会产生一些不洁的想法。/你也许会后悔见到这样的神明，因为你不能爱上一个神。/见过他以后你就明白为什么你是凡人，为什么说凡人的颜"\
               "值是有上限的。/不论多帅的男人，在他面前都黯然失色。它能让任何一个生物迷上他，即使是一个无情的精灵。/你也许在读到磅礴的传说时想象"\
               "过这样的身影，那一丝想象不及他样貌的万分之一。".split('/'),
'god_woman_low' :"神明总是带着面罩，大多数人只在画像上见过他的盛世美颜。/其实他很清楚，大多数信众爱的是他的脸。/不论多虔诚的信徒，对这样的神明"\
               "总会产生一些不洁的想法。/你也许会后悔见到这样的神明，因为你不能爱上一个神。/见过他以后你就明白为什么你是凡人，为什么说凡人的颜"\
               "值是有上限的。/不论多帅的男人，在他面前都黯然失色。它能让任何一个生物迷上他，即使是一个无情的精灵。/你也许在读到磅礴的传说时想象"\
               "过这样的身影，那一丝想象不及他样貌的万分之一。".split('/'),
                         }


'''
由words，num，stencil组成的随机生成的人物描述，
stencil对应每个key的是一个str，stencil的str
words对应每个key的是一组dict，dict对应的是在str中补充的词汇，每个类目的所有可能
num对应每个key的是一组dict，dict对应的是stencil中需要补充的词汇的数量，random函数会从words里按num的数目取一个合理的数字。
举例：
stencil = '{n40}是{v0}{n41}，{v1}行业{n30}。{n42}是{v2}{n20}{n43}，通过{n31}和{n32}达到{n33}。' \
          '{n44}是在{n45}采用{n21}打法达成{n46}。{n47}{n48}作为{n22}为产品赋能，{n49}作为{n23}' \
          '的评判标准。亮点是{n24}，优势是{n25}。{v3}整个{n410}，{v4}{n26}{v5}{n411}。{n34}是{n35}' \
          '达到{n36}标准。'

num = {'v': 6, 'n2': 7, 'n3': 7, 'n4': 12}



words ={
# 二字动词
v : '皮实、复盘、赋能、加持、沉淀、倒逼、落地、串联、协同、反哺、兼容、包装、重组、履约、' \
    '响应、量化、发力、布局、联动、细分、梳理、输出、加速、共建、共创、支撑、融合、解耦、聚合、' \
    '集成、对标、对齐、聚焦、抓手、拆解、拉通、抽象、摸索、提炼、打通、吃透、迁移、分发、分层、' \
    '封装、辐射、围绕、复用、渗透、扩展、开拓、给到、死磕、破圈'.split('、').

# 二字名词
n2 : '漏斗、中台、闭环、打法、纽带、矩阵、刺激、规模、场景、维度、格局、形态、生态、话术、' \
     '体系、认知、玩法、体感、感知、调性、心智、战役、合力、赛道、基因、因子、模型、载体、横向、' \
     '通道、补位、链路、试点'.split('、'),

# 三字名词
n3 : '新生态、感知度、颗粒度、方法论、组合拳、引爆点、点线面、精细化、差异化、平台化、结构化、' \
     '影响力、耦合性、易用性、便捷性、一致性、端到端、短平快、护城河'.split('、'),

# 四字名词
n4 : '底层逻辑、顶层设计、交付价值、生命周期、价值转化、强化认知、资源倾斜、完善逻辑、抽离透传、' \
     '复用打法、商业模式、快速响应、定性定量、关键路径、去中心化、结果导向、垂直领域、归因分析、' \
     '体验度量、信息屏障'.split('、')
}     
'''
discrbe_a_life_sum_up_half_done_words = {
'M_man_low':{'v':"1/2".split('/')},
'M_man_mid':{'v':"1/2".split('/')},
'M_man_high':{'v':"1/2".split('/')},
'M_man_very_high':{'v':"1/2".split('/')},
'M_woman_low':{'v':"1/2".split('/')},
'M_woman_mid':{'v':"1/2".split('/')},
'M_woman_high':{'v':"1/2".split('/')},
'M_woman_very_high':{'v':"1/2".split('/')},
'JL_man_low':{'v':"1/2".split('/')},
'JL_man_mid':{'v':"1/2".split('/')},
'JL_man_high':{'v':"1/2".split('/')},
'JL_man_very_high':{'v':"1/2".split('/')},
'JL_woman_low':{'v':"1/2".split('/')},
'JL_woman_mid':{'v':"1/2".split('/')},
'JL_woman_high':{'v':"1/2".split('/')},
'JL_woman_very_high':{'v':"1/2".split('/')},
'god_man_low':{'v':"1/2".split('/')},
'god_man_mid':{'v':"1/2".split('/')},
'god_man_high':{'v':"1/2".split('/')},
'god_man_very_high':{'v':"1/2".split('/')},
'god_woman_low':{'v':"1/2".split('/')},
'god_woman_mid':{'v':"1/2".split('/')},
'god_woman_high':{'v':"1/2".split('/')},
'god_woman_very_high':{'v':"1/2".split('/')},
}

discrbe_a_life_sum_up_half_done_stencil = {
'M_man_low':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'M_man_mid':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'M_man_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'M_man_very_high':"{v0}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'M_woman_low':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'M_woman_mid':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'M_woman_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'M_woman_very_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'JL_man_low':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'JL_man_mid':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'JL_man_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'JL_man_very_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'JL_woman_low':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'JL_woman_mid':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'JL_woman_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'JL_woman_very_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'god_man_low':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'god_man_mid':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'god_man_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'god_man_very_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'god_woman_low':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'god_woman_mid':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'god_woman_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。",
'god_woman_very_high':"{v0}{v1}{发色}{刘海}{后发}，看着{脸型}，{身材}，以及{腿型}和{脚型}，一看便是{气质}。"
}

discrbe_a_life_sum_up_half_done_num = {
'M_man_low':{'v':2},
'M_man_mid':{'v':2},
'M_man_high':{'v':2},
'M_man_very_high':{'v':2},
'M_woman_low':{'v':2},
'M_woman_mid':{'v':2},
'M_woman_high':{'v':2},
'M_woman_very_high':{'v':2},
'JL_man_low':{'v':2},
'JL_man_mid':{'v':2},
'JL_man_high':{'v':2},
'JL_man_very_high':{'v':2},
'JL_woman_low':{'v':2},
'JL_woman_mid':{'v':2},
'JL_woman_high':{'v':2},
'JL_woman_very_high':{'v':2},
'god_man_low':{'v':2},
'god_man_mid':{'v':2},
'god_man_high':{'v':2},
'god_man_very_high':{'v':2},
'god_woman_low':{'v':2},
'god_woman_mid':{'v':2},
'god_woman_high':{'v':2},
'god_woman_very_high':{'v':2},
}

def complete_the_discribe(take_key):
    result = let_stences_be_lists_from_stencil(discrbe_a_life_sum_up_half_done_stencil[take_key], discrbe_a_life_sum_up_half_done_num\
    [take_key], discrbe_a_life_sum_up_half_done_words[take_key])
    return result


discrbe_a_life_sum_up_half_done ={
'M_man_low':complete_the_discribe('M_man_low'),
'M_man_mid':complete_the_discribe('M_man_mid'),
'M_man_high':complete_the_discribe('M_man_high'),
'M_man_very_high':complete_the_discribe('M_man_very_high'),
'M_woman_low':complete_the_discribe('M_woman_low'),
'M_woman_mid':complete_the_discribe('M_woman_mid'),
'M_woman_high':complete_the_discribe('M_woman_high'),
'M_woman_very_high':complete_the_discribe('M_woman_very_high'),
'JL_man_low':complete_the_discribe('JL_man_low'),
'JL_man_mid':complete_the_discribe('JL_man_mid'),
'JL_man_high':complete_the_discribe('JL_man_high'),
'JL_man_very_high':complete_the_discribe('JL_man_very_high'),
'JL_woman_low':complete_the_discribe('JL_woman_low'),
'JL_woman_mid':complete_the_discribe('JL_woman_mid'),
'JL_woman_high':complete_the_discribe('JL_woman_high'),
'JL_woman_very_high':complete_the_discribe('JL_woman_very_high'),
'god_man_low':complete_the_discribe('god_man_low'),
'god_man_mid':complete_the_discribe('god_man_mid'),
'god_man_high':complete_the_discribe('god_man_high'),
'god_man_very_high':complete_the_discribe('god_man_very_high'),
'god_woman_low':complete_the_discribe('god_woman_low'),
'god_woman_mid':complete_the_discribe('god_woman_mid'),
'god_woman_high':complete_the_discribe('god_woman_high'),
'god_woman_very_high':complete_the_discribe('god_woman_very_high')
}

#所有的描述生物类NLP的格式如下：
all_NLP_lists_for_discribes = [discrbe_a_life_sum_up_all_done,discrbe_a_life_sum_up_half_done,discrbe_a_life_sum_up_all_done]

def give_life_discribe(take_key,other):
    type_to_discribe = {'精灵':lambda:'JL_','神':lambda:'god_','平民':lambda :'M_'}[take_key['种族']]()+\
                         {'男':lambda:'man_','女':lambda:'woman_','不涉及':lambda :'woman_'}[take_key['性别']]()+\
                         {'平平无奇':lambda:'mid','丑陋不堪':lambda:'low','倾国倾城':lambda :'very_high','姿色极佳':lambda :'high'}[take_key['外貌']]()
    all_discribes = list()
    for items in all_NLP_lists_for_discribes:
        if type(items[type_to_discribe]) == type(list()):
            all_discribes.append(random.sample(tuple(items[type_to_discribe]),1))
        else:
            print(other)
            all_discribes.append(items[type_to_discribe].format(**other['特点']))
        print(all_discribes)
    return data_base.get_all_in_lists(all_discribes)